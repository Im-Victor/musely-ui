@import 'function';

@mixin utils-user-select($value) {
  -moz-user-select: $value;
  -webkit-user-select: $value;
  -ms-user-select: $value;
}

/* Mixins */
@mixin clearfix {
  $selector: &;

  @at-root {
    #{$selector}::before,
    #{$selector}::after {
      display: table;
      content: '';
    }
    #{$selector}::after {
      clear: both;
    }
  }
}

/* Break-points
 -------------------------- */
@mixin res($key, $map: $--breakpoints) {
  // 循环断点Map，如果存在则返回
  @if map-has-key($map, $key) {
    @media only screen and #{inspect(map-get($map, $key))} {
      @content;
    }
  } @else {
    @warn "Undefeined points: `#{$map}`";
  }
}

//Break-points 2
@mixin respond-to($key, $map: $--breakpoints) {
  $query: map-get($map, $key);
  // 这里是scss error提示估计大部分人（包括我）都没怎么使用过
  @if not $query {
    @error 'No value found for `#{$key}`. Please make sure it is defined in `$key` map.';
  }
  // 具体断点解释在这里，作者比较严谨，校验了$query合法性
  @media #{if(type-of($query) == 'string', unquote($query), inspect($query))} {
    @content;
  }
}

/* BEM
 -------------------------- */
@mixin b($block) {
  $B: $namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}
@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}

/* 实现不同方向的三角 s*/
@mixin triangle($x, $y: 10px, $z: white) {
  @if $x == 'top' {
    border-width: $y;
    border-color: transparent transparent $z transparent;
    border-style: dashed dashed solid dashed;
  } @else if $x == 'bottom' {
    border-width: $y;
    border-color: $z transparent transparent transparent;
    border-style: solid dashed dashed dashed;
  } @else if $x == 'left' {
    border-width: $y;
    border-color: transparent $z transparent transparent;
    border-style: dashed solid dashed dashed;
  } @else if $x == 'right' {
    border-width: $y;
    border-color: transparent transparent transparent $z;
    border-style: dashed dashed dashed solid;
  }
  width: 0;
  height: 0;
  overflow: hidden;
}

@mixin pseudo($pseudo) {
  @at-root #{&}#{':#{$pseudo}'} {
    @content;
  }
}
